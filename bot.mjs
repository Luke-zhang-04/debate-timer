#!/bin/node
/**
 * Discord Debate Timer
 * @copyright 2020 - 2021 Luke Zhang
 * @author Luke Zhang luke-zhang-04.github.io/
 * @version 1.9.3
 * @license BSD-3-Clause
 * @preserve
 */
import e,{hostname as t,userInfo as n}from"os";import o from"node-emoji";import a,{readFileSync as i}from"fs";import s from"yaml";import r from"@luke-zhang-04/dateplus";import l,{TextChannel as d,MessageEmbed as m}from"discord.js";import c from"dotenv";import u from"bad-words";import h from"changelog-parser";import f from"semver/functions/coerce.js";import p from"didyoumean";import{GoogleSpreadsheet as g}from"google-spreadsheet";import v from"child_process";const b=(e,t)=>{var n,o;return"permission"===t.type?null!==(n=null==e?void 0:e.hasPermission(t.value))&&void 0!==n&&n:null!==(null!==(o=null==e?void 0:e.roles.cache.find((e=>e.name===t.value)))&&void 0!==o?o:null)},w=e=>{try{return e()}catch(e){return}};const $=(e,t,n=1/0)=>{let o=0;for(const a of e)if((null==t?void 0:t(a))&&o++,o>n)return o;return o},y=(e,t)=>Math.floor(Math.random()*((t=Math.floor(t))-(e=Math.ceil(e)))+e),k=(e,t=1)=>{for(let n=0;n<t;n++)for(let t=e.length-1;t>0;t--){const n=y(0,t+1),o=e[t];e[t]=e[n],e[n]=o}},_=(e,t=2)=>{const n=[];for(let o=0;o<e.length;o+=t)n.push(e.slice(o,o+t));return n},T=["CREATE_INSTANT_INVITE","KICK_MEMBERS","BAN_MEMBERS","ADMINISTRATOR","MANAGE_CHANNELS","MANAGE_GUILD","ADD_REACTIONS","VIEW_AUDIT_LOG","PRIORITY_SPEAKER","STREAM","VIEW_CHANNEL","SEND_MESSAGES","SEND_TTS_MESSAGES","MANAGE_MESSAGES","EMBED_LINKS","ATTACH_FILES","READ_MESSAGE_HISTORY","MENTION_EVERYONE","USE_EXTERNAL_EMOJIS","VIEW_GUILD_INSIGHTS","CONNECT","SPEAK","MUTE_MEMBERS","DEAFEN_MEMBERS","MOVE_MEMBERS","USE_VAD","CHANGE_NICKNAME","MANAGE_NICKNAMES","MANAGE_ROLES","MANAGE_WEBHOOKS","MANAGE_EMOJIS"],M={prefix:"!",maxTimers:10,maxTimersPerUser:3,commandCooldown:1,maxMotions:20,defaultTimeCtrl:5,serverIconUrl:"https://cdn0.iconfinder.com/data/icons/free-social-media-set/24/github-512.png",botIconUrl:"https://cdn0.iconfinder.com/data/icons/free-social-media-set/24/discord-512.png",otherImageUrl:"https://cdn0.iconfinder.com/data/icons/free-social-media-set/24/discord-512.png",shouldDetectProfanity:!0,shouldUseFuzzyStringMatch:!0,shouldRespondToUnknownCommand:!0,shouldAllowJokes:!0,adminRoleName:{type:"permission",value:"ADMINISTRATOR"},emojis:{debating:{name:"speaking_head"},spectating:{name:"eyes"}},whitelistedWords:[],blacklistedWords:[],verbosity:2};Object.freeze(M);let S=w((()=>i("config.yml").toString()))||"";""===S&&(S=w((()=>i("config.yaml").toString()))||""),""===S&&(S=w((()=>i("config.json").toString()))||"{}");const E=s.parse(S);if(!(e=>{var t,n,o;const a="string"==typeof e.prefix&&""!==e.prefix&&!e.prefix.includes(" ")||void 0===e.prefix,i=(null!==(t=e.whitelistedWords)&&void 0!==t?t:[])instanceof Array,s=(null!==(n=e.blackListedWords)&&void 0!==n?n:[])instanceof Array,r="object"==typeof e.emojis,l=void 0===e.welcomeMessage||null===e.welcomeMessage||!1===e.welcomeMessage||"object"==typeof e.welcomeMessage,d="number"==typeof(null!==(o=e.verbosity)&&void 0!==o?o:2)&&void 0===e.verbosity||null===e.verbosity||e.verbosity>=0&&e.verbosity<=2;if(!a)throw new Error("Prefix should be type string, have no spaces, and not be empty");if(!i)throw new Error("whitelistedWords should be array or undefined");if(!s)throw new Error("blacklistedWords should be array or undefined");if(!r)throw new Error("emojis should be an object");if(!l)throw new Error("welcomeMessage should be either undefined, null, false, or an object");if(!d)throw new Error("verbosity should be either 0, 1, 2, or null/undefined");const m=["maxTimers","maxTimersPerUser","commandCooldown","maxMotions","defaultTimeCtrl","serverIconUrl","botIconUrl","shouldDetectProfanity","shouldUseFuzzyStringMatch","shouldRespondToUnknownCommand","shouldAllowJokes"];for(const t of m)if(void 0!==e[t]&&typeof M[t]!=typeof e[t])return!1;if("string"==typeof e.adminRoleName){const{adminRoleName:t}=e;if(/^hasPermission:(?<permissionName>[A-Z]|_)/u.test(t)){const n=t.slice("hasPermission:".length);if(!T.includes(n))throw new Error(`adminRoleName permission after hasPermission: must be one of the following:\n\n${T.join(", ")}`);e.adminRoleName={type:"permission",value:n}}else e.adminRoleName={type:"name",value:t}}return!0})(E))throw new Error("Config does not conform to the required structure.");const N={...M,...E};for(const[e,t]of Object.entries(N.emojis))t.id||/[^\u0000-\u00ff]/u.test(t.name)||(N.emojis[e].name=(I=`:${t.name}:`,o.emojify(I.replace(/:judge:/gu,"🧑‍⚖️"))));var I;Object.freeze(N);const{prefix:C,maxTimers:A,maxTimersPerUser:P,commandCooldown:R,maxMotions:U,defaultTimeCtrl:D,serverIconUrl:j,otherImageUrl:L,botIconUrl:x,shouldDetectProfanity:O,shouldUseFuzzyStringMatch:G,shouldRespondToUnknownCommand:W,shouldAllowJokes:F,adminRoleName:q,emojis:z,whitelistedWords:Y,blacklistedWords:B,welcomeMessage:H,verbosity:J}=N,K=e=>{const t=Array.from(function*(e,t,n=1/0){let o=0;for(const[a,i]of e.entries())if((null==t?void 0:t(i,a,e))&&(yield i,o++),o>n)return}(Object.values(se),(t=>void 0===e||e.id===t.creator.id||e.id===t.mentionedUid),10)).map(((e,t)=>`**${t+1}**. Id: \`${e.fakeId}\`, Created by: \`${e.creator.username}\`, State: \`${e.isPaused?"paused":"running"}\`, Time: \`${V(e.time)}\``));return`**Timers for: ${`${(null==e?void 0:e.id)&&`<@${e.id}>`||"global"}`}**:\n${t.join("\n")||"None"}`},V=(e,t=!1)=>{const n=e%60,o=(e-n)/60,a=n<10?`0${n}`:n.toString();return t||o>0?`${o}:${a}`:e.toString()},Z=e=>{if((e=>{let t=Math.floor(e.length/2);for(;t>=1;){for(let n=t;n<e.length;n++){const o=e[n];let a,i=0;for(let s=n;s>t-2&&(i=s,a=s-t<0?e.length-s-t:s-t,!(e[a]<=o));s-=t)e[s]=e[a];e[i]=o}t=Math.floor(t/2)}})(e),0!==e[0])return 0;let t=0;for(const n of e){if(n-t>=2)return n-1;t=n}return Math.max(...e)+1},X=(e,t,n)=>null!==t&&(t.id===n.mentionedUid||t.id===n.creator.id||b(e,q)),Q=(e,t)=>{let n;for(const[o,a]of Object.entries(e))if(a.creator.id===t){if(n)return;n=o}return null!=n?n:""},ee=(e,t,{author:n,channel:o})=>void 0===e||isNaN(t)?(o.send(`:confused: Multiple timers found for <@${n.id}>. Please provide the argument [id]. For help using this command, run the \`!help\` command.\n\n${K(n)}`),!1):""!==e||(o.send(`:confused: You have no timers <@${n.id}>`),!1),te=(e,t,n)=>{const{author:o,member:a,channel:i}=e;let s=t,r=Number(s);if(void 0===s){const t=Q(se,o.id),n=Number(t);if(!ee(t,n,e))return;r=n,s=t}else if(isNaN(r))return void i.send(`:1234: Could not parse \`${s}\` as a number. Learn to count.`);2===J&&i.send(`Looking for timer with id ${s}`);const l=se[r];if(void 0===l)i.send(`:confused: Could not find timer with id ${s}`);else if(X(a,o,l))l.playPause(n),1===J?e.react("✅"):2===J&&i.send(`${"pause"===n?"Paused":"Continuing"} timer with id ${s}`);else{const e=l.mentionedUid?`, the mentioned user (${l.mentionedUid}),`:"";i.send(`Sorry <@${o.id}>, but you're not authorized to modify this protected timer. Only the timer creator (${l.creator.username})${e} and those with the \`${q.value}\` ${"name"===q.type?"role":"permission"} may modify this timer.`)}},ne=(e,t,n,o)=>{const{author:a,member:i,channel:s}=e;let r=Number(n),l=Number(o)*t;if(void 0===n)return void s.send(":confused: Argument [id] not provided. For help using this command, run the `!help` command.");if(isNaN(r))return void s.send(`:1234: Could not parse \`${n}\` as a number. Learn to count.`);if(void 0===o){const n=Q(se,a.id),o=Number(n);if(!ee(n,o,e))return;l=r*t,r=o}else if(isNaN(l))return void s.send(`:1234: Could not parse \`${o}\` as a number. Learn to count.`);if(2===J&&0===l)return void s.send(":1234: Changing the timer by 0 does nothing. Learn to add.");const d=se[r];if(void 0===d)s.send(`:confused: Could not find timer with id ${n}`);else if(X(i,a,d))((e,t,n,o)=>{1===J?t.react("✅"):2===J&&(o>0?t.channel.send(`Winding timer ${n} forward by ${o} seconds`):t.channel.send(`Winding timer ${n} backwards by ${-o} seconds`)),e.changeTime(o)})(d,e,r,l);else{const e=d.mentionedUid?`, the mentioned user (${d.mentionedUid}),`:"";s.send(`Sorry <@${a.id}>, but you're not authorized to modify this protected timer. Only the timer creator (${d.creator.username})${e} and those with the \`${q.value}\` ${"name"===q.type?"role":"permission"} may modify this timer.`)}};var oe=(e,t)=>{const n=e.content.split(" ");ne(e,t,n[1],n[2])};const ae=e=>{const{author:t,member:n,channel:o}=e;let a=e.content.split(" ")[1];const i="mute"===e.content.split(" ")[2];let s=Number(a);if(void 0===a){const n=Q(se,t.id),o=Number(n);if(!ee(n,o,e))return;s=o,a=n}else if(isNaN(s))return void o.send(`:1234: Could not parse \`${a}\` as a number. Learn to count.`);if(2===J){const e=Math.random();F&&e>.75?o.send(`Destroying leftist "Timer ${a}" with FACTS and LOGIC`):F&&e>.5?o.send(`Sending hitman for timer with id ${a}`):o.send(`Looking for timer with id ${a}`)}const r=se[s];if(void 0===r)o.send(`:confused: Could not find timer with id ${a}`);else if(X(n,t,r))r.shouldMute=Boolean(i),r.kill(),1===J&&e.react("✅");else{const e=r.mentionedUid?`, the mentioned user (${r.mentionedUid}),`:"";o.send(`Sorry <@${t.id}>, but you're not authorized to modify this protected timer. Only the timer creator (${r.creator.username})${e} and those with the \`${q.value}\` ${"name"===q.type?"role":"permission"} may modify this timer.`)}},ie=e=>{var t,n,o;if(A>-1&&Object.keys(se).length>=A)return void e.channel.send(`A maximum of ${A} are allowed to run concurrently. The max timer count can be changed in the configuration file.`);if(o=e.author,$(Object.values(se),(e=>e.creator.id===o.id),P+1)>=P)return void e.channel.send(`A maximum of ${P} timers are allowed for one user. Why do you even need ${P} timers at once?`);if(n=e.channel,$(Object.values(se),(e=>e.message.channel.id===n.id),5)>=4)return void e.channel.send("A maximum of 4 timers are allowed for one channel to stay within Discord API limits. Why do you even need 4 timers in a channel?");const a=Z(Object.keys(se).map((e=>Number(e)))),i=Array.from(function*(e,t,n){const o=t instanceof Function?t:n,a=t instanceof Function?void 0:t;for(const[t,n]of e.entries()){const i=null==o?void 0:o(n,t,0,e);i!==a&&(yield i)}}(e.content.split(" "),!1,(e=>!isNaN(Number(e))&&Number(e)))),s=null!==(t=i[0])&&void 0!==t?t:D,l=i[1];if(!isNaN(s)&&s>15)return void e.channel.send("Sorry, the longest timer that I can allow is 15 minutes.");const d=new re(a,e,r.minsToSecs(s),l?r.minsToSecs(l):void 0);d.start(),se[a]=d},se={};class re{constructor(e,t,n,o){var a,i;this._fakeId=e,this.message=t,this.shouldMute=!0,this.isPaused=!1,this._trueStartTime=Date.now(),this._stages={1:!1,2:!1,3:!1,4:!1,5:!1},this._time=0,this._intervalId=null,this._barWidth=60,this._startTime=Date.now(),this._mentionedUser=t.mentions.users.first(),this.mentionedUid=null===(a=this._mentionedUser)||void 0===a?void 0:a.id,this.creator=t.author;const s=this.mentionedUid;this.timeCtrl=isNaN(n)?r.minsToSecs(5):n,console.log(o),this.protectedTime=null!=o?o:this.timeCtrl>=r.minsToSecs(7)?60:30,t.channel.send(`:timer: Starting timer${s?` for debater <@${s}>`:""}!`);const l=this.mentionedUid?`For: <@${this.mentionedUid}>\n`:"",d=`\`[${"—".repeat(this._barWidth)}]\` 0%\n`,m=this.timeCtrl<=r.minsToSecs(3)||!this._stages[1]&&!this._stages[4];this._msg=t.channel.send(`${d}${l}Started by: ${this.creator}\nCurrent time: ${V(this.time)}\nEnd time: ${V(this.timeCtrl)}\nProtected: ${m?"yes":"no"}\nId: ${null!==(i=this._fakeId)&&void 0!==i?i:"unknown"}${this.isPaused?"\nPaused":""}`)}get time(){return this._time}get fakeId(){return this._fakeId}get startTime(){return this._startTime}async changeTime(e){this._startTime-=1e3*e;const t=Date.now();this._startTime>t?this._startTime=t:this._startTime<t-1e3*(this.timeCtrl+15)&&(this._startTime=t-1e3*(this.timeCtrl+15)),await this._updateStatus();const{_time:n,timeCtrl:o}=this;n<o+15&&this._stages[5]&&(this._stages[5]=!1),n<o&&this._stages[4]&&(this._stages[4]=!1),n<o-this.protectedTime&&this._stages[3]&&(this._stages[3]=!1),n<o/2&&this._stages[2]&&(this._stages[2]=!1),n<this.protectedTime&&this._stages[1]&&(this._stages[1]=!1)}start(){this._intervalId=setInterval((()=>{if(this.isPaused)return this._startTime+=5e3,void(Date.now()-this._trueStartTime>r.minsToMs(20)&&(this.message.channel.send(`Timer with id ${this._fakeId} has been paused for more than 20 minutes. This timer is now being killed.`),this.shouldMute=!1,this.kill()));this._updateStatus(),(this.time>=this.timeCtrl+15||this.time>r.minsToSecs(20))&&this.kill(!1)}),5e3)}async kill(e=!0){null!==this._intervalId&&clearInterval(this._intervalId),void 0!==this._mentionedUser&&this.shouldMute&&(async(e,t)=>{var n;const o=null==e?void 0:e.member(t);!(null===(n=null==e?void 0:e.me)||void 0===n?void 0:n.permissions.has(["MUTE_MEMBERS"]))||!(null==o?void 0:o.voice)||o.voice.selfMute||o.voice.selfDeaf||o.voice.serverMute||o.voice.serverDeaf||(await(null==o?void 0:o.voice.setMute(!0,"Your speech is over")),await new Promise((e=>{setTimeout((()=>e(void 0)),2500)})),await(null==o?void 0:o.voice.setMute(!1)))})(this.message.guild,this._mentionedUser),2===J&&e&&this.message.channel.send(`Killed timer with id ${this._fakeId}.`),(await this._msg).edit(`:white_check_mark: Speech Finished at \`${V(Math.round((Date.now()-this._startTime)/1e3),!0)}\`!`),void 0!==this._fakeId&&Reflect.deleteProperty(se,this._fakeId)}playPause(e){this.isPaused=void 0===e?!this.isPaused:"pause"===e}async _updateStatus(){var e;const t=await this._msg,{_barWidth:n,timeCtrl:o}=this;this._time=Math.round((Date.now()-this._startTime)/1e3),this._notifySpeechStatus();const a=this.mentionedUid?`For: <@${this.mentionedUid}>\n`:"",i=Math.floor(this._time/(o/n)),s=`\`[${"█".repeat(Math.min(i,n))}${"—".repeat(Math.min(Math.max(n-i,0),n))}]\` ${Math.min(Math.round(this._time/o*1e3)/10,100)}%\n`,l=this.timeCtrl<=r.minsToSecs(3)||!this._stages[1]&&!this._stages[4];t.edit(`${s}${a}Started by: ${this.creator}\nCurrent time: ${V(this.time)}\nEnd time: ${V(this.timeCtrl)}\nProtected: ${l?"yes":"no"}\nId: ${null!==(e=this._fakeId)&&void 0!==e?e:"unknown"}${this.isPaused?"\nPaused":""}`)}_notifySpeechStatus(){const e=this.mentionedUid?`<@${this.mentionedUid}>`:"",{channel:t}=this.message,{time:n,timeCtrl:o}=this,a=this.timeCtrl>r.minsToSecs(3);if(!this._stages[1]&&a&&n>=this.protectedTime){const n=V(this.protectedTime,!0);this._stages[1]=!0,t.send(`${e} timer ${this._fakeId} - **${n}** - Protected time is over!`)}if(!this._stages[2]&&n>=o/2){const n=V(o/2);this._stages[2]=!0,t.send(`${e} timer ${this._fakeId} - **${n}** - You're halfway through your speech!`)}if(!this._stages[3]&&a&&n>=o-this.protectedTime){const n=V(o-this.protectedTime);this._stages[3]=!0,t.send(`${e} timer ${this._fakeId} - **${n}** - Protected time! Your speech is almost over!`)}if(!this._stages[4]&&n>=o){const n=V(o);this._stages[4]=!0,t.send(`${e} timer ${this._fakeId} - **${n}** - Wrap it up! You have 15 seconds.`)}if(!this._stages[5]&&n>=o+15){const n=V(o+15);this._stages[5]=!0,t.send(`${e} timer ${this._fakeId} - **${n}** - Your speech is over!`),2===J&&Math.random()>=.9&&t.send("BTW, I don't use exclamation marks because I'm excited, I'm just forced to.")}}}let le;const de=async()=>await h("CHANGELOG.md"),me=e=>`\`\`\`md\n# Changelog\n[Changelog](https://github.com/Luke-zhang-04/debate-timer/blob/master/CHANGELOG.md)\n\n## ${e.title}\n\n${e.body}\n\`\`\``,{version:ce}=JSON.parse(a.readFileSync("package.json").toString()),ue=()=>(new m).setColor("#f4f4f4").setAuthor("Debate Timer",x,"https://github.com/Luke-zhang-04/debate-timer").setFooter("Copyright (C) 2020 - 2021 Luke Zhang"),he={bruh:{name:`\`${C}bruh\``,value:F?"B R U H":"This command is not enabled"},coinflip:{name:`\`${C}coinflip\``,value:"Flip a coin"},based:{name:`\`${C}based\``,value:F?"No comment.":"This command is not enabled"},epic:{name:`\`${C}epic\``,value:F?"Ok, this is epic.":"This command is not enabled"},dice:{name:`\`${C}dice\``,value:"Roll a dice"},regex:{name:"Regular Expression Help",value:"Basic intro to regular expressions. Find out more here: <https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet>.\nYou can use regex to match most text channel names. For an example, you can match all chats names `poi` with `poi`.\nBut you can do more with regex.\n- If you have rooms names `poi-1`, `poi-2`, etc. you can match them with `poi-.*`. The `.*` will match anything after `poi-`.\n- You can also use `poi-[0-9]+` to match `poi-` then one or more of any number.\n- If you want to match `poi` and `the-ga`, you can do `poi|the-ga`, or `poi-.*|the-ga`."},start:{name:`\`${C}start [@mention?] [timeControl? = 5] [protectedTime? = auto]\``,value:"Starts a timer with a default length of 5 minutes.\n        If the speech is 5 minutes, there is 30 seconds protected time at the start and end of the speech. If the speech if 7 or 8 minutes, there is a minute of proteced time.\n        All lengths include 15 seconds grace time.",fields:[{name:"Parameters",value:"- `[@mention?]` - optional - @mention for current speaker\n- `[timeControl? = 5]` - optional - speech length in minutes. Default value of 5.\n- `[protectedTime? = auto] - optional - protected time in minutes. Automatically determined by default.`"},{name:"Notes",value:"- Parameter order does not matter :smiley:\n- Will ping `[@mention]` for important times if included"},{name:"Usage",value:`\`\`\`${C}start @debate-timer\n${C}start 7 0.5\n${C}start 3 @debate-timer\`\`\``}]},timer:{name:`\`${C}timer [@mention?] [timeControl? = 5]\``,value:`Functionally equivalent to \`${C}start\`.`},kill:{name:`\`${C}kill [id]\``,value:"Stops a timer with id of `[id]`",fields:[{name:"Parameters",value:"`[id]` - required - integer value for timer id. Will be displayed under a timer."},{name:"Usage",value:`\`${C}kill 3\``}]},stop:{name:`\`${C}stop [id]\``,value:`Functionally equivalent to \`${C}kill\`.`},end:{name:`\`${C}end [id]\``,value:`Functionally equivalent to \`${C}kill\`.`},list:{name:`\`${C}list [global?: global | undefined]\``,value:"Lists the currently stored timers",fields:[{name:"Parameters",value:'- [global?] - optional - if "global" is passed in, it will display all timers regardless of ownership. Otherwise, it will show all the timers that you were tagged with, or you created.'},{name:"Usage",value:`\`\`\`${C}list\n${C}list global\`\`\``}]},backward:{name:`\`${C}backward [id] [amt]\``,value:"Winds timer with id `[id]` back `[amt]` seconds",fields:[{name:"Parameters",value:"- `[id]` - required - integer value for timer id. Will be displayed under a timer.\n- `[amt]` - required - amount in seconds to wind the timer back. Can be negative."},{name:"Usage",value:`\`${C}backward 0 10\` winds timer 0 backwards by 10 seconds`}]},forward:{name:`\`${C}forward [id] [amt]\``,value:"Winds timer with id `[id]` forward `[amt]` seconds",fields:[{name:"Parameters",value:"- `[id]` - required - integer value for timer id. Will be displayed under a timer.\n- `[amt]` - required - amount in seconds to wind the timer forward. Can be negative."},{name:"Usage",value:`\`${C}foward 0 10\` winds timer 0 forward by 10 seconds`}]},give:{name:`\`${C}give [id] [amt]\``,value:`Functionally equivalent to \`${C}backward\`.`},back:{name:`\`${C}back [id] [amt]\``,value:`Functionally equivalent to \`${C}backward\`.`},take:{name:`\`${C}take [id] [amt]\``,value:`Functionally equivalent to \`${C}forward\`.`},getMotion:{name:`\`${C}getMotion\``,value:"Gets a random motion from the hellomotions spreadsheet\n<https://docs.google.com/spreadsheets/d/1qQlqFeJ3iYbzXYrLBMgbmT6LcJLj6JcG3LJyZSbkAJY/edit#gid=2007846678>",fields:[{name:"Usage",value:`\`${C}getMotion\``}]},motion:{name:`\`${C}motion\``,value:`Functionally equivalent to \`${C}getMotion\`.`},getMotions:{name:`\`${C}getMotions [count? = 5]\``,value:"Gets multiple motions from the hellomotions spreadsheet\n<https://docs.google.com/spreadsheets/d/1qQlqFeJ3iYbzXYrLBMgbmT6LcJLj6JcG3LJyZSbkAJY/edit#gid=2007846678>",fields:[{name:"Parameters",value:`\`[count? = 5]\` - optional - integer value for number of motions to get. Default is 5. Won't do more than ${U}.`},{name:"Usage",value:`\`\`\`${C}getMotions\n${C}getMotions 6\`\`\``}]},motions:{name:`\`${C}motions [count? = 5]\``,value:`Functionally equivalent to \`${C}getMotions\`.`},makePartners:{name:"`makePartners [format?: bp | cp | worlds = bp] [debater1] [debater2] ...`",value:"Makes random partners",fields:[{name:"Parameters",value:"- `[format?: bp | cp | worlds = bp]` - optional - the debate format to make teams for. Default value of bp.\n- `[debater1]` - required - debater 1\n- `[debater2]` - required - debater 2\n...\n- `[debater n]` - debater *n*. n must be greater than or equal to the number of debaters specified by your chosen format."},{name:"Notes",value:'- The number of required debaters is dependent on the format of choice. Adding extra debaters will result in randomly excluded debaters.\n- Parameter order does not matter :smiley:. However, if you enter "bp", "cp", or "worlds" as the name of a debater, the command will not work.'},{name:"Usage",value:`\`\`\`${C}makePartners worlds debater1 debater2 debater3 debater4 debater5 debater6\n${C}makePartners @debate-timer debater2 debater3 debater4 debater5 debater6 debater7 debater8 debater9 bp\`\`\``}]},partners:{name:`\`${C}partners [format?: bp | cp | worlds = bp] [debater1] [debater2] ...\``,value:`Functionally equivalent to \`${C}makePartners\`.`},makeRound:{name:`\`${C}makeRound [format?: bp | cp | worlds = bp] [debater1] [debater2] ...\``,value:"Creates a random draw, and then chooses a random motion. Refer to `makeDraw`."},round:{name:`\`${C}round [format?: bp | cp | worlds = bp] [debater1] [debater2] ...\``,value:"Creates a random draw, and then chooses a random motion. Refer to `makeDraw`."},makeDraw:{name:`\`${C}makeDraw [format?: bp | cp | worlds = bp] [debater1] [debater2] ...\``,value:"Makes random draw, which includes positions and teams.",fields:[{name:"Parameters",value:"- `[format?: bp | cp | worlds = bp]` - optional - the debate format to make teams for. Default value of bp.\n- `[debater1]` - required - debater 1\n- `[debater2]` - required - debater 2\n...\n- `[debater n]` - debater *n*. n must be greater than or equal to the number of debaters specified by your chosen format."},{name:"Notes",value:'- The number of required debaters is dependent on the format of choice. Adding extra debaters will result in randomly excluded debaters.\n- Parameter order does not matter :smiley:. However, if you enter "bp", "cp", or "worlds" as the name of a debater, the command will not work.'},{name:"Usage",value:`\`\`\`${C}makeDraw worlds debater1 debater2 debater3 debater4 debater5 debater6\n${C}makeDraw @debate-timer debater2 debater3 debater4 debater5 debater6 debater7 debater8 debater9 bp\`\`\``}]},draw:{name:`\`${C}draw [format?: bp | cp | worlds = bp] [debater1] [debater2] ...\``,value:`Functionally equivalent to \`${C}makeDraw\`.`},newMotion:{name:`\`${C}newMotion\``,value:"Reply to a generated round, and change the motion. Use this if the motion is bad, but you want to keep the teams.",fields:[{name:"Usage",value:`\`${C}newMotion\``}]},poll:{name:`\`${C}poll\``,value:"Creates a poll",fields:[{name:"Notes",value:"- Only one poll can run at a time per user\n- Creating a new poll will erase a user's old poll\n- Polls delete themselves after around at least 1 hour of creation"},{name:"Usage",value:`\`${C}poll\``}]},getPoll:{name:`\`${C}getPoll [option?] [raw?]\``,value:"Gets data from user's current poll. If `[option]` is specified, it will fetch the poll data for the specific poll option.",fields:[{name:"Parameters",value:"- `[option?]` - optional - which poll option to get data for. If not provided, all poll data will be shown.\n- `[raw?]` - optional - if poll data should be plaintext usernames instead of pings"},{name:"Usage",value:`\`\`\`${C}getPoll\n${C}getPoll debating\n${C}getPoll raw\n${C}getPoll spectating raw\`\`\``}]},pause:{name:`\`${C}pause [id]\``,value:"Pauses a timer with id of `[id]`",fields:[{name:"Parameters",value:"`[id]` - required - integer value for timer id. Will be displayed under a timer."},{name:"Usage",value:`\`${C}pause 3\``}]},resume:{name:`\`${C}resume [id]\``,value:"Resumes a timer with id of `[id]`",fields:[{name:"Parameters",value:"`[id]` - required - integer value for timer id. Will be displayed under a timer."},{name:"Usage",value:`\`${C}resume 3\``}]},broadcast:{name:`\`${C}broadcast [regex] [amt? = Infinity]\``,value:"Broadcasts replied message to `[amt]` number of channels which satisfy the regex restraint `[regex]`. You can learn about regex here <https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet>.",fields:[{name:"Parameters",value:"- `[regex]` - required - regex restraint of channel names for bot to send to\n- `[amt? = Infinity]` - optional - max number of channels to broadcast to. Default Infinity."},{name:"Notes",value:"- Parameter order does not matter :smiley:\n- You must reply to a message, and that message will be broadcasted"},{name:"Usage",value:`\`\`\`${C}broadcast round-[0-9]+\n${C}broadcast 3 .*\`\`\``}]},shuffle:{name:`\`${C}shuffle [item1?] [item2?] ...\``,value:"Shuffles the items",fields:[{name:"Parameters",value:"- `[item1?]` - optional - first item to shuffle\n- `[item2?]` - optional - second item to shuffle\n- and so on"},{name:"Usage",value:`\`${C}shuffle a b c d e f g\``}]},changelog:{name:`\`${C}changelog [version?]\``,value:"Shows the changelog of this bot. <https://github.com/Luke-zhang-04/debate-timer/blob/master/CHANGELOG.md>",fields:[{name:"Parameters",value:'- `[version?]` - optional - which changelog version to show.\n> - If no input is provided, a help message is shown.\n> - If "latest" is provided, the latest version\'s changelog will be shown.\n> - If "versions"\nis provided, the changelog\'s versions will be shown.'},{name:"Usage",value:`\`\`\`${C}changelog latest\n${C}changelog versions\n${C}changelog ${ce}\`\`\``}]}},fe={title:"Debate Timer Bot",desc:`This project is open source.\nYou can contribute to it at <https://github.com/Luke-zhang-04/debate-timer>\nFound a bug? Report it at <https://github.com/Luke-zhang-04/debate-timer/issues/new>\n\nThe configured prefix is \`${C}\`\nThis bot is in version ${ce}`,fields:[{name:"Help",value:`:book: \`help [command?]\`\nGet some help\n**Parameters**\n- \`[command?]\` - optional - name of command to get more detailed help with. Doesn't have to include \`${C}\`.\nE.g ${C}help getMotion`},{name:":computer: Misc",value:(F?"- based, bruh, epic\n":"")+"- coinfilp, dice\n- broadcast [regex] [amt? = Infinity]\n- shuffle [item1] [item2] ...\n- changelog [version?]"},{name:":timer: Timer",value:"- start [@mention?] [timeControl?] [protectedTime?]\n- kill [id]\n- resume [id]\n- pause [id]\n- list [global?]\n- backward [id] [amt]\n- forward [id] [amt]"},{name:":newspaper: Motions",value:"- getMotion\n- getMotions [count?]"},{name:":speaking_head: Team Formation",value:"- makeTeams [format?]\n- makePartners [format?] [debater1] [debater2] ...\n- makeDraw [format?] [debater1] [debater2] ...\n- makeRound [format?] [debater1] [debater2] ...\n- newMotion"}]},pe=ue().setTitle(fe.title).setDescription(fe.desc).addFields(...fe.fields).setURL("https://github.com/Luke-zhang-04/debate-timer");var ge=e=>{var t;let n=e.content.split(" ")[1];if(void 0===n)return void e.channel.send(pe instanceof m?pe:pe.toString());"!"===n[0]&&(n=n.slice(1));const o=G?p(n,Object.keys(he)):n;if(null===o)return void e.channel.send(`:book: No manual entry for ${n}`);if(o.toLowerCase()!==n.toLowerCase()){const t=Math.random()>.75,a=`Automatically corrected your entry request from \`${n}\` to \`${o}\`. Learn to ${t?"tpe":"type"}.`;e.channel.send(a).then((e=>{t&&setTimeout((()=>{e.edit(`${a.replace(/tpe|tpye/gu,"type")}`)}),2500)}))}const a=he[o],i=ue().setTitle(a.name).setDescription(a.value).addFields(...null!==(t=a.fields)&&void 0!==t?t:[]);e.channel.send(i instanceof m?i:i.toString())};process.env.APIKEY||c.config();const ve=new g("1qQlqFeJ3iYbzXYrLBMgbmT6LcJLj6JcG3LJyZSbkAJY"),be=(async()=>{try{return ve.useApiKey(process.env.APIKEY),void await ve.loadInfo()}catch(e){console.error(e)}})(),we=async()=>{var e,t;await be;let n=null,o="";for(;null===n;){const a=ve.sheetsById[2007846678],i=y(2,a.rowCount);await a.loadCells(`S${i}:T${i}`),n=a.getCellByA1(`S${i}`).value,o=null!==(t=null===(e=a.getCellByA1(`T${i}`).value)||void 0===e?void 0:e.toString())&&void 0!==t?t:""}return o&&(o+="\n\nMotion: "),`${o}${n.toString()}`},$e=async e=>{var t;try{await be;const n=[],o=[],a=ve.sheetsById[2007846678],i=[];let s=Number(null!==(t=e.content.split(" ")[1])&&void 0!==t?t:5);if(isNaN(s))return void await e.channel.send(`:1234: Could not parse \`${e.content.split(" ")[1]}\` as a number. Learn to count.`);if(s>U)e.channel.send(`:tired_face: Requested a total of ${s} motions. That's too much power for me to handle. I'll be sending you ${U} motions.`),s=U;else if(s<0)return void await e.channel.send(`:1234: Requested a total of ${s} motions. That's smaller than 0 (yes, I can count).`);for(let e=0;e<s;e++){let e=y(2,a.rowCount);for(;o.includes(e);)e=y(2,a.rowCount);o.push(e),n.push(a.loadCells(`S${e}:T${e}`).then((()=>{var t,n;return[null===(t=a.getCellByA1(`S${e}`).value)||void 0===t?void 0:t.toString(),null===(n=a.getCellByA1(`T${e}`).value)||void 0===n?void 0:n.toString()]})))}await Promise.all(n).then((async e=>{for(const[t,[n,o]]of e.entries()){let e=o?`*Info Slide:* ${o}\n\n*Motion:* `:"";e+=null!=n?n:await we(),i.push(`**${t+1}.** ${e}`)}})).catch((()=>"***Error :sweat_smile:***"));for(const t of(e=>{var t;const n=[":speaking_head: **Got random motions**:"];let o=0;for(const a of e)(null!==(t=n[o])&&void 0!==t?t:n[o]="").length+a.length<2e3?n[o]+=`\n\n${a}`:(o++,n.push(`_ _\n${a}`));return n})(i))await e.channel.send(t).catch((t=>t instanceof Error?e.channel.send(`${t.name}: ${t.message} Solution: try again.`):e.channel.send(JSON.stringify(t))))}catch(t){const n=t instanceof Error?t:new Error(String(t));e.channel.send(`An error occured:\n\n\`\`\`${n.name}\n${n.message}\`\`\``)}};var ye={getRandomMotion:we,getRandomMotions:$e,sendRandomMotion:async e=>{try{const t=Number(e.content.split(" ")[1]);isNaN(t)?await e.channel.send(`:speaking_head: ${await we()}`):(await e.channel.send("You ran the command `getMotion` (singular) with a number. Assuming user meant `getMotions`."),await $e(e))}catch(t){const n=t instanceof Error?t:new Error(String(t));e.channel.send(`An error occured:\n\n\`\`\`${n.name}\n${n.message}\`\`\``)}}};const ke={};for(const e of Object.keys(z))ke[e]=[];const _e=(e,t=null)=>{for(const[n,o]of Object.entries(z))if(e===o.name&&(!t&&!o.id||t===o.id))return n};class Te{constructor(e,t){this.message=t,this.createdAt=Date.now(),this.user=e.author}get data(){var e;const t={};for(const[n,{emoji:o,users:a}]of this.message.reactions.cache){const n=_e(o.name,o.id);n&&(null!==(e=t[n])&&void 0!==e?e:t[n]=[]).push(...a.cache.map((e=>[e.id,e.username.replace(/ /gu,"-")])))}return t}getDataByKey(e){for(const[t,{emoji:n,users:o}]of this.message.reactions.cache){const t=_e(n.name,n.id);if(t&&t===e)return o.cache.map((e=>[e.id,e.username.replace(/ /gu,"-")]))}return void 0===ke[e]?void 0:[]}}const Me={},Se=async e=>{const t=await e.channel.send(`**Poll**\nReact here for what you feel like doing today. Here are your options:\n\n${Object.entries(z).map((([e,t])=>`${e}: ${t.id?`<:${t.name}:${t.id}>`:t.name}`)).join("\n")}`);Me[e.author.id]=new Te(e,t)},Ee=e=>{const t=Me[e.author.id];if(void 0===t)return void e.channel.send(`Sorry <@${e.author.id}>, but I couldn't find your poll. Maybe your poll expired?`);const n=e.content.split(" ").slice(1),o=n.find((e=>"raw"!==e)),a=void 0!==n.find((e=>"raw"===e));if(o){const n=t.getDataByKey(o);void 0===n?e.channel.send(`No such poll option \`${o}\`. Your options are: \`${Object.keys(ke).join(", ")}.\``):0===n.length?e.channel.send("*empty*"):e.channel.send(n.map((([e,t])=>a?t:`<@${e}>`)).join(" "))}else{const n=Object.entries(t.data).map((([e,t])=>`- **${e}**: ${t.map((([e,t])=>a?t:`<@${e}>`)).join(" ")}`)).join("\n");e.channel.send(`<@${e.author.id}>'s Poll\n\n${0===n.length?"No responses":n}`)}};var Ne={makePoll:Se,getPoll:Ee},Ie=Object.freeze({__proto__:null,polls:Me,makePoll:Se,getPoll:Ee,default:Ne});let Ce;const Ae=e=>new Promise(((t,n)=>{v.exec(e,((e,o,a)=>{""===a||a.includes("WARNING")?null!==e&&n(e):t(a),t(o)}))}));var Pe=async()=>null!=Ce?Ce:Ce=await(async()=>{var n,o;const a=await Ae("cat /proc/version").catch((e=>e instanceof Error?`${e.name}: ${e.message}`:String(e))),i=await Ae("uname -a").catch((e=>e instanceof Error?`${e.name}: ${e.message}`:String(e))),s=null!==(o=null===(n=e.cpus()[0])||void 0===n?void 0:n.model)&&void 0!==o?o:"CPU Info unavailable",r=Math.round(1e6*e.totalmem()/1073741824)/1e6,l=Math.round(1e6*e.freemem()/1073741824)/1e6;return`debate-timer-bot@${t()}\n\n${a}\nCPU: ${s}\nMemory: ${r-l}GB / ${r}GB\n\n${i}`})();const Re={bp:["Team-A","Team-B","Team-C","Team-D"],cp:["Team-A","Team-B"],worlds:["Team-A","Team-B"]},Ue={bp:["OG","OO","CG","CO"],cp:["GOV","OPP"],worlds:["GOV","OPP"]},De=(e,t)=>{var n,o;const a=`${e.content} ${null!==(n=null==t?void 0:t.content.replace(/  +/gu," "))&&void 0!==n?n:""}`.trim().split(" "),i=a.slice(1).filter((e=>!["bp","worlds","cp"].includes(e.toLowerCase()))),s=(null!==(o=a.find((e=>["bp","worlds","cp"].includes(e.toLowerCase()))))&&void 0!==o?o:"bp").toLowerCase(),r="worlds"===s?3:2;if(!(i.length<Ue[s].length*r))return k(i,4),i.length=Ue[s].length*r,[_(i,r),s];e.channel.send(`:1234: at least ${Ue[s].length*r} @mentions required, but ${i.length} ${1===i.length?"was":"were"} found. Learn to count. (That's smaller than ${Ue[s].length*r}, right?)`)};var je={makeDraw:e=>{const{reference:t}=e,n=t?e.channel.messages.cache.find((e=>e.id===t.messageID)):void 0,o=De(e,n);if(o){const[t,n]=o,a=t.map(((e,t)=>`\n> **${Ue[n][t]}**: ${e.join(", ")}`)).join();e.channel.send(`:speaking_head: **Generated random draw**: ${a}`)}},makeTeams:e=>{var t;const n=(null!==(t=e.content.split(" ").find((e=>["bp","worlds","cp"].includes(e.toLowerCase()))))&&void 0!==t?t:"bp").toLowerCase(),o=[...Re[n]];k(o,2);const a=o.map(((e,t)=>`\n> **${Ue[n][t]}**: ${e}`)).join("");e.channel.send(`:speaking_head: **Generated random teams**: ${a}`)},makePartners:e=>{const{reference:t}=e,n=t?e.channel.messages.cache.find((e=>e.id===t.messageID)):void 0,o=De(e,n);if(o){const[t,n]=o,a=t.map(((e,t)=>`\n> **${Re[n][t]}**: ${e.join(", ")}`)).join();e.channel.send(`:speaking_head: **Generated random partners**: ${a}`)}},makeRound:async e=>{const{reference:t}=e,n=t?e.channel.messages.cache.find((e=>e.id===t.messageID)):void 0,o=De(e,n);if(o){const[t,n]=o,a=t.map(((e,t)=>`\n> **${Ue[n][t]}**: ${e.join(", ")}`)).join(),i=await we();e.channel.send(`:speaking_head: **Here's the round**: ${a}\n\n**Motion:**\n${i}`)}},newMotion:async e=>{var t,n,o;if(null!==e.guild&&!(null===(t=e.member)||void 0===t?void 0:t.permissions.has("MANAGE_MESSAGES",!0)))return void await e.channel.send("You don't have permission to edit this motion");const a="**Motion:**",{reference:i}=e;if(null===i||null===i.messageID)return void await e.channel.send("No message given. Make sure you reply to the message you want to redraw the motion to.");const s=await e.channel.messages.fetch(i.messageID),r=s.content.split(a);if(!r[1])return void await e.channel.send("Error getting new motion; couldn't parse message properly.");const l=await(async e=>{try{return await e()}catch(e){return e instanceof Error?e:new Error("string"==typeof e?e:String(e))}})((async()=>await we()));l instanceof Error?await e.channel.send(`Error getting a new motion:\n\n${l.name}\n${l.message}`):(r[1]=`\n${l}`,await s.edit(r.join(a)),(null===(o=null===(n=e.guild)||void 0===n?void 0:n.me)||void 0===o?void 0:o.permissions.has("MANAGE_MESSAGES"))&&e.delete())}};const Le={help:ge,man:ge,...{bruh:e=>e.channel.send("",{files:[N.serverIconUrl]}),based:e=>e.channel.send("",{files:[N.otherImageUrl]}),coinflip:e=>e.channel.send(Math.random()>.5?":coin: Heads!":":coin: Tails!"),epic:e=>e.channel.send("",{files:[N.botIconUrl]}),dice:e=>e.channel.send(`:game_die: ${y(1,7)}`),ping:(e,t)=>e.channel.send(`:ping_pong: Latency is ${Math.round(t.ws.ping)}ms`),systemInfo:async e=>e.channel.send(await Pe()),shuffle:e=>e.channel.send(((e,t=1)=>{const n=[...e];for(let e=0;e<t;e++)for(let e=n.length-1;e>0;e--){const t=y(0,e+1),o=n[e];n[e]=n[t],n[t]=o}return n})(e.content.split(" ").slice(1),3).join(" "))},...{broadcast:async e=>{var t,n;if(null===e.reference||null===e.reference.messageID)return void await e.channel.send("No message given. Make sure you reply to the message you want to broadcast.");if(null===e.guild)return void await e.channel.send("Can't broadcast without a server");if(!b(e.member,q)){const{author:t}=e,n=Math.random();let o=`Sorry <@${t.id}>, but you're not authorized to use this command.`;return F&&n>.9?o=`Sorry <@${t.id}>, but we have a strict no leftist policy here.`:n>.7&&(o=`Sorry (not really) <@${t.id}>, but you're not authorized to use this command.`),void await e.channel.send(`${o} Only those with the \`${q.value}\` ${"name"===q.type?"role":"permission"} may use this command.`)}const o=e.content.split(" "),a=o.slice(1).find((e=>isNaN(Number(e))));if(!a)return void await e.channel.send("Can't broadcast message. No regex restraint provided.");const i=Number(null!==(t=o.find((e=>!isNaN(Number(e)))))&&void 0!==t?t:1/0),s=(e=>{try{return e()}catch(e){return e instanceof Error?e:new Error("string"==typeof e?e:String(e))}})((()=>new RegExp(a,"u")));if(s instanceof Error)return void await e.channel.send(`Cannot broadcast message. Reason:\n\`\`\`${s.name}\n${s.message}\`\`\`\n${Math.random()>.5?"Smooth brain":"Brainlet"}, learn to regex. <https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet>, or run \`!help regex\``);const{content:r}=await e.channel.messages.fetch(e.reference.messageID),l=[];let m=0;for(const[t,o]of e.guild.channels.cache)if(o instanceof d&&s.test(o.name)&&(null===(n=e.guild.me)||void 0===n?void 0:n.permissionsIn(o).has(["SEND_MESSAGES","VIEW_CHANNEL"]))){if(m>=i)break;l.push(o.send(r)),m++}try{await Promise.all(l),await e.channel.send(`Success! Your message was broadcast to ${l.length} channels!`)}catch(t){const n=t instanceof Error?t:new Error("string"==typeof t?t:String(t));await e.channel.send(`An error occured. Reason:\n\`\`\`${n.name}\n${n.message}\`\`\``)}},changelog:async e=>{var t;const n=e.content.split(" ")[1];if(!n)return void await e.channel.send(`Show the changelog for this bot <https://github.com/Luke-zhang-04/debate-timer/blob/master/CHANGELOG.md>.\nThe format is based on Keep a Changelog <https://keepachangelog.com/en/1.0.0/>,\nand this project adheres (mostly) to Semantic Versioning <https://semver.org/spec/v2.0.0.html>.\n\n- To **list versions**, run \`${C}changelog versions\`\n- To show the changelog for the **latest version**, run \`${C}changelog latest\`\n- To show the changelog for a **specific version**, run \`${C}changlog [version]\``);if("latest"===n){const t=(null!=le?le:le=await de()).versions[0];return void await e.channel.send(me(t))}if("versions"===n)return void await e.channel.send((null!=le?le:le=await de()).versions.map(((e,t)=>`${e.version}${0===t?" *[latest]*":""}`)).join(", "));const o=null===(t=f(n))||void 0===t?void 0:t.raw,a=(null!=le?le:le=await de()).versions.find((e=>e.version===o||e.version===n));a?await e.channel.send(me(a)):await e.channel.send(`Could not find changelog entry for version \`${n}\``)}},...{start:ie,timer:ie,kill:ae,stop:ae,end:ae,list:e=>{const t=e.content.split(" ")[1];e.channel.send(K("global"===t?void 0:e.author))},take:e=>oe(e,1),give:e=>oe(e,-1),forward:e=>oe(e,1),backward:e=>oe(e,-1),back:e=>oe(e,-1),pause:e=>{te(e,e.content.split(" ")[1],"pause")},resume:e=>{te(e,e.content.split(" ")[1],"resume")}},...{makeDraw:je.makeDraw,draw:je.makeDraw,makeTeams:je.makeTeams,teams:je.makeTeams,makePartners:je.makePartners,partners:je.makePartners,makeRound:je.makeRound,round:je.makeRound,newMotion:je.newMotion},...{getMotion:ye.sendRandomMotion,motion:ye.sendRandomMotion,getMotions:ye.getRandomMotions,motions:ye.getRandomMotions},...{poll:Ne.makePoll,getPoll:Ne.getPoll}},xe=new u;xe.addWords(...N.blacklistedWords),xe.removeWords(...N.whitelistedWords),p.threshold=.6;let Oe=0;const Ge=async(e,t)=>{e.content=e.content.replace(/  +/giu," ").trim();const[n]=e.content.slice(C.length).split(" ");if(N.shouldRespondToUnknownCommand&&""===(null!=n?n:""))return void await e.channel.send(`:wave: Hey there! Yes, I'm alive. If you need help using me, type \`${C}help\`!`);const o=N.shouldUseFuzzyStringMatch?(a=p(n,Object.keys(Le)))instanceof Array?a[0]:a:n;var a;if(null!==o){const a=Le[o];if(void 0!==Le){if(o.toLowerCase()!==n.toLowerCase()){const t=Math.random()>.75,a=`Automatically corrected your input from \`${n}\` to \`${o}\`. Learn to ${t?"tpye":"type"}.`;e.channel.send(a).then((e=>{t&&setTimeout((()=>{e.edit(`${a.replace(/tpe|tpye/gu,"type")}`)}),2500)}))}return void await a(e,t)}}if(N.shouldRespondToUnknownCommand){const t=Math.random()>.75,n=`:confused: The command \`${e.content.slice(C.length)}\` is not recognized.\nIf this was a typo, learn to ${t?"tpe":"type"}.\nOtherwise, ${t?"tpye":"type"} \`${C}help\` for help.`;e.channel.send(n).then((e=>{t&&setTimeout((()=>{e.edit(`${n.replace(/tpe|tpye/gu,"type")}`)}),2500)}))}};c.config(),Promise.resolve().then((function(){return Be})).then((({register:e})=>e()));const We=async e=>{var o,i;const s=new Date,l=r.addZeros(`${s.getDay()+1}/${s.getMonth()+1}/${s.getFullYear()}`),d=s.getSeconds()<10?`0${s.getSeconds()}`:s.getSeconds(),m=`${s.getHours()}:${s.getMinutes()}:${d}`,c=await(async()=>{try{return await(e="bot.error.log",new Promise(((t,n)=>{a.readFile(e,"utf-8",((e,o)=>e?n(e):t(o)))})))}catch{return""}var e})();let u="";var h,f;console.error(e),e instanceof Error&&(u=null===(i=null===(o=e.stack)||void 0===o?void 0:o.length)||void 0===i||i?e.stack:"Stack trace too long"),await(h="bot.error.log",f=`${t()} ${n().username} [${l}:${m} ${Date.now()}] ERROR - "${e}" Stack trace; most recent call first:\n${u}\n${c}`.substr(0,25e5),new Promise(((e,t)=>{a.writeFile(h,f,"utf-8",(n=>n?t(n):e()))})))};console.log("Copyright 2020 Luke Zhang. This program comes with ABSOLUTELY NO WARRANTY. This is free software, and you are welcome to redistribute it under certain conditions; see https://github.com/Luke-zhang-04/debate-timer/blob/master/LICENSE for more details.");const Fe=new l.Client;Fe.login(process.env.AUTHTOKEN),Fe.once("ready",(()=>{var e;console.log("Timer bot is online!"),null===(e=Fe.user)||void 0===e||e.setPresence({status:"online",activity:{name:`for ${C}help`,type:"WATCHING"}})})),Fe.on("guildMemberAdd",(e=>{var t;if(null!=H&&!1!==H&&Object.keys(H).length>=2){const{channel:n,message:o}=H,a=H.channelName&&new RegExp(H.channelName,"u"),i=null!==(t=e.guild.channels.cache.find((e=>e.id===n)))&&void 0!==t?t:a&&e.guild.channels.cache.find((e=>a.test(e.name)));i&&i instanceof l.TextChannel?i.send(o.replace(/%username% /gu,e.user.username).replace(/%mention%/gu,`<@${e.user.id}>`).replace(/%serverName%/gu,e.guild.name)):console.log(`Cannot find text channel with ID ${n}`)}})),Fe.on("message",(async e=>{try{await(async(e,t)=>{var n;if(!e.author.bot)if(e.content.trim().startsWith(N.prefix)){const n=1e3*N.commandCooldown;if(Date.now()-Oe>=n)return await Ge(e,t),void(Oe=Date.now());e.channel.send(`The configured command cooldown is ${N.commandCooldown}s. Since this bot is hosted on either some crappy server or Luke's laptop, there needs to be a cooldown. The cooldown time can be changed in the configuration file.`)}else if(N.shouldDetectProfanity&&xe.isProfane(e.content)){const t=Math.random(),n=e.author.id;t<=.6?e.channel.send(`Hey <@${n}>! That's not very nice!`):t<=.7?e.channel.send(`Does your asshole get jealous of all the shit that comes out of your mouth <@${n}>?`):t<=.8?e.channel.send(`Don't fucking swear <@${n}> :angry:.`):e.channel.send(`<@${n}>`,{files:["https://stayhipp.com/wp-content/uploads/2019/02/you-better-watch.jpg"]})}else new RegExp(`^<@(\\!)?${null===(n=t.user)||void 0===n?void 0:n.id}>$`).test(e.content.trim())&&await e.channel.send(`:wave: Hey there! Yes, I'm alive. If you need help using me, type \`${C}help\`!`)})(e,Fe)}catch(t){e.channel.send(`:dizzy_face: Sorry, this bot has died (crashed) due to an unexpected error \`${t}\`.\n\nIn all likelyhood, the bot itself is fine. You should still be able to run commands.\nI've logged the error in an error log file.`),t instanceof Error&&We(t)}})),process.on("uncaughtException",We),process.on("unhandledRejection",We);const qe=r.minsToMs(30),ze=async()=>{const{polls:e}=await Promise.resolve().then((function(){return Ie})),t=Date.now();for(const[n,o]of Object.entries(e))t-o.createdAt>r.hrsToMs(1)&&Reflect.deleteProperty(e,n)};let Ye;var Be=Object.freeze({__proto__:null,register:()=>{ze(),void 0===Ye&&(Ye=setInterval((()=>{ze()}),qe))},unregister:()=>{void 0!==Ye&&clearInterval(Ye),Ye=void 0}});export{Fe as client};
